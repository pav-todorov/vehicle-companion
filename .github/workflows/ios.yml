name: iOS workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Default Scheme
        run: |
          # Get the list of schemes and find the default one
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo "Using default scheme: $default"
          echo $default > default

      - name: Debugging Build Files
        run: |
          echo "Looking for .xcworkspace or .xcodeproj files"
          ls -A | grep -i \.xcworkspace$
          ls -A | grep -i \.xcodeproj$

      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          set -e  # Exit immediately on error

          # Select simulator
          device=$(xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//")
          echo "Using device: $device"

          # Ensure scheme is set correctly
          if [ "$scheme" = "default" ]; then
            scheme=$(cat default)
          fi
          echo "Building with scheme: $scheme"

          # Detect workspace or project
          if [ "$(ls -A | grep -i \.xcworkspace$)" ]; then
            filetype_parameter="workspace"
            file_to_build=$(ls -A | grep -i \.xcworkspace$)
          else
            filetype_parameter="project"
            file_to_build=$(ls -A | grep -i \.xcodeproj$)
          fi
          file_to_build=$(echo $file_to_build | awk '{$1=$1;print}')
          echo "Building $file_to_build with scheme $scheme"

          # Build the project
          xcodebuild build-for-testing -scheme "$scheme" -$filetype_parameter "$file_to_build" -destination "platform=$platform,name=$device" | tee xcodebuild_build.log

      - name: Upload Build Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: xcodebuild-logs
          path: xcodebuild_build.log

      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          set -e  # Exit immediately on error

          # Select simulator
          device=$(xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//")
          echo "Using device: $device"

          # Ensure scheme is set correctly
          if [ "$scheme" = "default" ]; then
            scheme=$(cat default)
          fi
          echo "Testing with scheme: $scheme"

          # Detect workspace or project
          if [ "$(ls -A | grep -i \.xcworkspace$)" ]; then
            filetype_parameter="workspace"
            file_to_build=$(ls -A | grep -i \.xcworkspace$)
          else
            filetype_parameter="project"
            file_to_build=$(ls -A | grep -i \.xcodeproj$)
          fi
          file_to_build=$(echo $file_to_build | awk '{$1=$1;print}')
          echo "Testing $file_to_build with scheme $scheme"

          # Test the project
          xcodebuild test-without-building -scheme "$scheme" -$filetype_parameter "$file_to_build" -destination "platform=$platform,name=$device"
